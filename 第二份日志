06/04 19:11:47
express-4rxw-014
Node.js v22.16.0
06/04 19:11:47
express-4rxw-014
}
06/04 19:11:47
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:11:47
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:11:47
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:11:47
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:11:47
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:11:47
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:11:47
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:11:47
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:11:47
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:11:47
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:11:47
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:11:47
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:11:47
express-4rxw-014
- /app/src/app.js
06/04 19:11:47
express-4rxw-014
Require stack:
06/04 19:11:47
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:11:47
express-4rxw-014
  ^
06/04 19:11:47
express-4rxw-014
  throw err;
06/04 19:11:47
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:11:48
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:11:48
express-4rxw-014
> backend@1.0.0 start
06/04 19:11:49
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:11:49
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:11:49
express-4rxw-014
} +7ms
06/04 19:11:49
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:11:49
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:11:49
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +208ms
06/04 19:11:49
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +710ms
06/04 19:11:49
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +61ms
06/04 19:11:49
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +1ms
06/04 19:11:49
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +0ms
06/04 19:11:49
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +1ms
06/04 19:11:49
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:11:49
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +3ms
06/04 19:11:49
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
06/04 19:11:49
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +0ms
06/04 19:11:49
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +1ms
06/04 19:11:49
express-4rxw-014
} +2ms
06/04 19:11:49
express-4rxw-014
  "originalDistro": "debian"
06/04 19:11:49
express-4rxw-014
  "familyDistro": "debian",
06/04 19:11:49
express-4rxw-014
  "targetDistro": "debian",
06/04 19:11:49
express-4rxw-014
{
06/04 19:11:49
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:11:49
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +726ms
06/04 19:11:49
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +10ms
06/04 19:11:49
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:11:49
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +1ms
06/04 19:11:49
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:11:54
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:11:54
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +3ms
06/04 19:11:54
express-4rxw-014
] +1ms
06/04 19:11:54
express-4rxw-014
libqueryEngine
06/04 19:11:54
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:11:54
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +67ms
06/04 19:11:54
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +60ms
06/04 19:11:54
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +55ms
06/04 19:11:54
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:11:54
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:11:54
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:11:53.600861701Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +3ms
06/04 19:11:54
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +2ms
06/04 19:11:54
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +23ms
06/04 19:11:54
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:11:54
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:11:54
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:11:54
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:11:54
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:11:54
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:11:54
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:11:54
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:11:54
express-4rxw-014
} +1ms
06/04 19:11:54
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:11:54
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:11:54
express-4rxw-014
Environment variables loaded from .env
06/04 19:11:54
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +0ms
06/04 19:11:54
express-4rxw-014
} +1ms
06/04 19:11:54
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:11:54
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:11:54
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +4687ms
06/04 19:11:54
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 5210.477329 ms +111ms
06/04 19:11:54
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 108ms
06/04 19:11:54
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:11:54
express-4rxw-014
} +105ms
06/04 19:11:54
express-4rxw-014
  }
06/04 19:11:54
express-4rxw-014
    }
06/04 19:11:54
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:11:54
express-4rxw-014
    "libqueryEngine": {
06/04 19:11:54
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:11:54
express-4rxw-014
prisma:getGenerators {
06/04 19:11:54
express-4rxw-014
} +0ms
06/04 19:11:54
express-4rxw-014
  }
06/04 19:11:54
express-4rxw-014
    ]
06/04 19:11:54
express-4rxw-014
      }
06/04 19:11:54
express-4rxw-014
        "native": true
06/04 19:11:54
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:11:54
express-4rxw-014
        "fromEnvVar": null,
06/04 19:11:54
express-4rxw-014
      {
06/04 19:11:54
express-4rxw-014
    "binaryTargets": [
06/04 19:11:54
express-4rxw-014
    ],
06/04 19:11:54
express-4rxw-014
libqueryEngine
06/04 19:11:54
express-4rxw-014
    "engines": [
06/04 19:11:54
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:11:54
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:11:54
express-4rxw-014
} +1ms
06/04 19:11:54
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:11:54
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:11:54
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +2ms
06/04 19:11:54
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +1ms
06/04 19:11:54
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:11:55
express-4rxw-014
  throw err;
06/04 19:11:55
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:11:55
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 5.470315999999912 ms +5ms
06/04 19:11:55
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 4.20054699999946 ms +1ms
06/04 19:11:55
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:11:55
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:11:55
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:11:55
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:11:55
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:11:55
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:11:55
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:11:55
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:11:55
express-4rxw-014
} +1ms
06/04 19:11:55
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:11:55
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:11:55
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:11:55
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:11:55
express-4rxw-014
} +1ms
06/04 19:11:55
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:11:55
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:11:55
express-4rxw-014
Node.js v22.16.0
06/04 19:11:55
express-4rxw-014
}
06/04 19:11:55
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:11:55
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:11:55
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:11:55
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:11:55
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:11:55
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:11:55
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:11:55
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:11:55
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:11:55
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:11:55
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:11:55
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:11:55
express-4rxw-014
- /app/src/app.js
06/04 19:11:55
express-4rxw-014
Require stack:
06/04 19:11:55
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:11:55
express-4rxw-014
  ^
06/04 19:11:56
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:11:56
express-4rxw-014
> backend@1.0.0 start
06/04 19:11:57
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +67ms
06/04 19:11:57
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +0ms
06/04 19:11:57
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +1ms
06/04 19:11:57
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +0ms
06/04 19:11:57
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:11:57
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +4ms
06/04 19:11:57
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
06/04 19:11:57
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +1ms
06/04 19:11:57
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +0ms
06/04 19:11:57
express-4rxw-014
} +2ms
06/04 19:11:57
express-4rxw-014
  "originalDistro": "debian"
06/04 19:11:57
express-4rxw-014
  "familyDistro": "debian",
06/04 19:11:57
express-4rxw-014
  "targetDistro": "debian",
06/04 19:11:57
express-4rxw-014
{
06/04 19:11:57
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:11:57
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +713ms
06/04 19:11:57
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +11ms
06/04 19:11:57
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:11:57
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:11:57
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:11:57
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:11:57
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +1ms
06/04 19:11:57
express-4rxw-014
} +6ms
06/04 19:11:57
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:11:57
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:11:57
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +192ms
06/04 19:11:57
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +698ms
06/04 19:12:03
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:03
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:03
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +5299ms
06/04 19:12:03
express-4rxw-014
    "libqueryEngine": {
06/04 19:12:03
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:12:03
express-4rxw-014
prisma:getGenerators {
06/04 19:12:03
express-4rxw-014
} +0ms
06/04 19:12:03
express-4rxw-014
  }
06/04 19:12:03
express-4rxw-014
    ]
06/04 19:12:03
express-4rxw-014
      }
06/04 19:12:03
express-4rxw-014
        "native": true
06/04 19:12:03
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:12:03
express-4rxw-014
        "fromEnvVar": null,
06/04 19:12:03
express-4rxw-014
      {
06/04 19:12:03
express-4rxw-014
    "binaryTargets": [
06/04 19:12:03
express-4rxw-014
    ],
06/04 19:12:03
express-4rxw-014
libqueryEngine
06/04 19:12:03
express-4rxw-014
    "engines": [
06/04 19:12:03
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:12:03
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:12:03
express-4rxw-014
} +1ms
06/04 19:12:03
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:03
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:03
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +3ms
06/04 19:12:03
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +0ms
06/04 19:12:03
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:12:03
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +72ms
06/04 19:12:03
express-4rxw-014
] +1ms
06/04 19:12:03
express-4rxw-014
libqueryEngine
06/04 19:12:03
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:12:03
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +29ms
06/04 19:12:03
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +98ms
06/04 19:12:03
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +55ms
06/04 19:12:03
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:12:03
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:12:03
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:12:02.226813678Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +3ms
06/04 19:12:03
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +2ms
06/04 19:12:03
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +21ms
06/04 19:12:03
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:12:03
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:03
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:03
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:12:03
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
} +2ms
06/04 19:12:03
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:03
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:03
express-4rxw-014
Environment variables loaded from .env
06/04 19:12:03
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +0ms
06/04 19:12:03
express-4rxw-014
} +1ms
06/04 19:12:03
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 4.488441000000421 ms +4ms
06/04 19:12:03
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 3.467362000000321 ms +0ms
06/04 19:12:03
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:03
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +1ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
} +0ms
06/04 19:12:03
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:03
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:03
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:03
express-4rxw-014
} +1ms
06/04 19:12:03
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:03
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:03
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 5892.59638 ms +106ms
06/04 19:12:03
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 104ms
06/04 19:12:03
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:12:03
express-4rxw-014
} +108ms
06/04 19:12:03
express-4rxw-014
  }
06/04 19:12:03
express-4rxw-014
    }
06/04 19:12:03
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:12:04
express-4rxw-014
Node.js v22.16.0
06/04 19:12:04
express-4rxw-014
}
06/04 19:12:04
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:12:04
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:12:04
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:12:04
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:12:04
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:12:04
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:12:04
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:12:04
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:12:04
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:12:04
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:12:04
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:12:04
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:12:04
express-4rxw-014
- /app/src/app.js
06/04 19:12:04
express-4rxw-014
Require stack:
06/04 19:12:04
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:12:04
express-4rxw-014
  ^
06/04 19:12:04
express-4rxw-014
  throw err;
06/04 19:12:04
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:12:05
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:12:05
express-4rxw-014
> backend@1.0.0 start
06/04 19:12:06
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:06
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +181ms
06/04 19:12:06
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +637ms
06/04 19:12:06
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +36ms
06/04 19:12:06
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +0ms
06/04 19:12:06
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +1ms
06/04 19:12:06
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +0ms
06/04 19:12:06
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:12:06
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +4ms
06/04 19:12:06
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +1ms
06/04 19:12:06
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +0ms
06/04 19:12:06
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +0ms
06/04 19:12:06
express-4rxw-014
} +2ms
06/04 19:12:06
express-4rxw-014
  "originalDistro": "debian"
06/04 19:12:06
express-4rxw-014
  "familyDistro": "debian",
06/04 19:12:06
express-4rxw-014
  "targetDistro": "debian",
06/04 19:12:06
express-4rxw-014
{
06/04 19:12:06
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:12:06
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +699ms
06/04 19:12:06
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +11ms
06/04 19:12:06
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:06
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +1ms
06/04 19:12:06
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:06
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:06
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:06
express-4rxw-014
} +53ms
06/04 19:12:06
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:10
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +53ms
06/04 19:12:10
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:12:10
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:12:10
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:12:09.913740779Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +3ms
06/04 19:12:10
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +2ms
06/04 19:12:10
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +23ms
06/04 19:12:10
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:12:10
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
06/04 19:12:10
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:10
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:12:10
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:10
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:10
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:10
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:10
express-4rxw-014
} +2ms
06/04 19:12:10
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:10
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:10
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +0ms
06/04 19:12:10
express-4rxw-014
} +1ms
06/04 19:12:10
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:10
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:10
express-4rxw-014
Environment variables loaded from .env
06/04 19:12:10
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +3950ms
06/04 19:12:11
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:12:11
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +67ms
06/04 19:12:11
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +61ms
06/04 19:12:11
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:11
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:11
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:11
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:12:11
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:11
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:11
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:11
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:11
express-4rxw-014
} +0ms
06/04 19:12:11
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:11
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:11
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:11
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:11
express-4rxw-014
} +1ms
06/04 19:12:11
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:11
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:11
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 4404.131847000001 ms +74ms
06/04 19:12:11
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 72ms
06/04 19:12:11
express-4rxw-014
} +100ms
06/04 19:12:11
express-4rxw-014
  }
06/04 19:12:11
express-4rxw-014
    }
06/04 19:12:11
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:12:11
express-4rxw-014
    "libqueryEngine": {
06/04 19:12:11
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:12:11
express-4rxw-014
prisma:getGenerators {
06/04 19:12:11
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:12:11
express-4rxw-014
} +0ms
06/04 19:12:11
express-4rxw-014
  }
06/04 19:12:11
express-4rxw-014
    ]
06/04 19:12:11
express-4rxw-014
      }
06/04 19:12:11
express-4rxw-014
        "native": true
06/04 19:12:11
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:12:11
express-4rxw-014
        "fromEnvVar": null,
06/04 19:12:11
express-4rxw-014
      {
06/04 19:12:11
express-4rxw-014
    "binaryTargets": [
06/04 19:12:11
express-4rxw-014
    ],
06/04 19:12:11
express-4rxw-014
libqueryEngine
06/04 19:12:11
express-4rxw-014
    "engines": [
06/04 19:12:11
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:12:11
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:12:11
express-4rxw-014
} +1ms
06/04 19:12:11
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:11
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:11
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +2ms
06/04 19:12:11
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +1ms
06/04 19:12:11
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:12:11
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:12:11
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +3ms
06/04 19:12:11
express-4rxw-014
] +0ms
06/04 19:12:11
express-4rxw-014
libqueryEngine
06/04 19:12:11
express-4rxw-014
Node.js v22.16.0
06/04 19:12:11
express-4rxw-014
}
06/04 19:12:11
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:12:11
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:12:11
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:12:11
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:12:11
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:12:11
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:12:11
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:12:11
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:12:11
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:12:11
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:12:11
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:12:11
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:12:11
express-4rxw-014
- /app/src/app.js
06/04 19:12:11
express-4rxw-014
Require stack:
06/04 19:12:11
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:12:11
express-4rxw-014
  ^
06/04 19:12:11
express-4rxw-014
  throw err;
06/04 19:12:11
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:12:11
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 4.760776000000078 ms +5ms
06/04 19:12:11
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 3.8973940000005314 ms +0ms
06/04 19:12:12
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:12:12
express-4rxw-014
> backend@1.0.0 start
06/04 19:12:13
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +0ms
06/04 19:12:13
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +0ms
06/04 19:12:13
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +1ms
06/04 19:12:13
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:12:13
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +4ms
06/04 19:12:13
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
06/04 19:12:13
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +1ms
06/04 19:12:13
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +0ms
06/04 19:12:13
express-4rxw-014
} +2ms
06/04 19:12:13
express-4rxw-014
  "originalDistro": "debian"
06/04 19:12:13
express-4rxw-014
  "familyDistro": "debian",
06/04 19:12:13
express-4rxw-014
  "targetDistro": "debian",
06/04 19:12:13
express-4rxw-014
{
06/04 19:12:13
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:12:13
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +699ms
06/04 19:12:13
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +11ms
06/04 19:12:13
express-4rxw-014
prisma:getConfig Using getConfig Wasm +42ms
06/04 19:12:13
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:13
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:12:13
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:13
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:13
express-4rxw-014
} +11ms
06/04 19:12:13
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:13
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:13
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +187ms
06/04 19:12:13
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +637ms
06/04 19:12:13
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +35ms
06/04 19:12:18
express-4rxw-014
  }
06/04 19:12:18
express-4rxw-014
    ]
06/04 19:12:18
express-4rxw-014
      }
06/04 19:12:18
express-4rxw-014
        "native": true
06/04 19:12:18
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:12:18
express-4rxw-014
        "fromEnvVar": null,
06/04 19:12:18
express-4rxw-014
      {
06/04 19:12:18
express-4rxw-014
    "binaryTargets": [
06/04 19:12:18
express-4rxw-014
    ],
06/04 19:12:18
express-4rxw-014
libqueryEngine
06/04 19:12:18
express-4rxw-014
    "engines": [
06/04 19:12:18
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:12:18
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:12:18
express-4rxw-014
} +1ms
06/04 19:12:18
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:18
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:18
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +2ms
06/04 19:12:18
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +1ms
06/04 19:12:18
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:12:18
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +2ms
06/04 19:12:18
express-4rxw-014
] +1ms
06/04 19:12:18
express-4rxw-014
libqueryEngine
06/04 19:12:18
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:12:18
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +67ms
06/04 19:12:18
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +59ms
06/04 19:12:18
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +57ms
06/04 19:12:18
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:12:18
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:12:18
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:12:17.597215997Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +2ms
06/04 19:12:18
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +2ms
06/04 19:12:18
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +35ms
06/04 19:12:18
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:12:18
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:12:18
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:18
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
} +2ms
06/04 19:12:18
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:18
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:18
express-4rxw-014
Environment variables loaded from .env
06/04 19:12:18
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +0ms
06/04 19:12:18
express-4rxw-014
} +1ms
06/04 19:12:18
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:18
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:18
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +4627ms
06/04 19:12:18
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 4.968988999999965 ms +5ms
06/04 19:12:18
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 3.4612010000000737 ms +0ms
06/04 19:12:18
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
06/04 19:12:18
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
} +0ms
06/04 19:12:18
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:18
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:18
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:18
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +1ms
06/04 19:12:18
express-4rxw-014
} +1ms
06/04 19:12:18
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:18
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:18
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 5109.626046 ms +44ms
06/04 19:12:18
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 42ms
06/04 19:12:18
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:12:18
express-4rxw-014
} +102ms
06/04 19:12:18
express-4rxw-014
  }
06/04 19:12:18
express-4rxw-014
    }
06/04 19:12:18
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:12:18
express-4rxw-014
    "libqueryEngine": {
06/04 19:12:18
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:12:18
express-4rxw-014
prisma:getGenerators {
06/04 19:12:18
express-4rxw-014
} +0ms
06/04 19:12:19
express-4rxw-014
Node.js v22.16.0
06/04 19:12:19
express-4rxw-014
}
06/04 19:12:19
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:12:19
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:12:19
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:12:19
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:12:19
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:12:19
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:12:19
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:12:19
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:12:19
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:12:19
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:12:19
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:12:19
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:12:19
express-4rxw-014
- /app/src/app.js
06/04 19:12:19
express-4rxw-014
Require stack:
06/04 19:12:19
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:12:19
express-4rxw-014
  ^
06/04 19:12:19
express-4rxw-014
  throw err;
06/04 19:12:19
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:12:20
express-4rxw-014
> backend@1.0.0 start
06/04 19:12:20
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:12:21
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +37ms
06/04 19:12:21
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +1ms
06/04 19:12:21
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +0ms
06/04 19:12:21
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +0ms
06/04 19:12:21
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:12:21
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +5ms
06/04 19:12:21
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
06/04 19:12:21
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +0ms
06/04 19:12:21
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +1ms
06/04 19:12:21
express-4rxw-014
} +1ms
06/04 19:12:21
express-4rxw-014
  "originalDistro": "debian"
06/04 19:12:21
express-4rxw-014
  "familyDistro": "debian",
06/04 19:12:21
express-4rxw-014
  "targetDistro": "debian",
06/04 19:12:21
express-4rxw-014
{
06/04 19:12:21
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:12:21
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +770ms
06/04 19:12:21
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +11ms
06/04 19:12:21
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:21
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:21
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:12:21
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:21
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:21
express-4rxw-014
} +52ms
06/04 19:12:21
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:21
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:21
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +183ms
06/04 19:12:21
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +709ms
06/04 19:12:25
init
-----
06/04 19:12:25
init
writing new private key to '/mnt/cert/privateKey.key'
06/04 19:12:25
init
...........................................................+++++
06/04 19:12:25
init
..........+++++
06/04 19:12:25
init
Generating a RSA private key
06/04 19:12:26
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:12:26
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:26
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:26
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:12:26
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +1ms
06/04 19:12:26
express-4rxw-014
} +31ms
06/04 19:12:26
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:26
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:26
express-4rxw-014
Environment variables loaded from .env
06/04 19:12:26
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +0ms
06/04 19:12:26
express-4rxw-014
} +1ms
06/04 19:12:26
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:26
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:26
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +4236ms
06/04 19:12:26
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:26
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:26
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
} +1ms
06/04 19:12:26
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:26
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:26
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 4774.137062 ms +80ms
06/04 19:12:26
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 78ms
06/04 19:12:26
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:12:26
express-4rxw-014
} +103ms
06/04 19:12:26
express-4rxw-014
  }
06/04 19:12:26
express-4rxw-014
    }
06/04 19:12:26
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:12:26
express-4rxw-014
    "libqueryEngine": {
06/04 19:12:26
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:12:26
express-4rxw-014
prisma:getGenerators {
06/04 19:12:26
express-4rxw-014
} +0ms
06/04 19:12:26
express-4rxw-014
  }
06/04 19:12:26
express-4rxw-014
    ]
06/04 19:12:26
express-4rxw-014
      }
06/04 19:12:26
express-4rxw-014
        "native": true
06/04 19:12:26
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:12:26
express-4rxw-014
        "fromEnvVar": null,
06/04 19:12:26
express-4rxw-014
      {
06/04 19:12:26
express-4rxw-014
    "binaryTargets": [
06/04 19:12:26
express-4rxw-014
    ],
06/04 19:12:26
express-4rxw-014
libqueryEngine
06/04 19:12:26
express-4rxw-014
    "engines": [
06/04 19:12:26
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:12:26
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:12:26
express-4rxw-014
} +1ms
06/04 19:12:26
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:26
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:26
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +2ms
06/04 19:12:26
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +0ms
06/04 19:12:26
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:12:26
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +3ms
06/04 19:12:26
express-4rxw-014
] +1ms
06/04 19:12:26
express-4rxw-014
libqueryEngine
06/04 19:12:26
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:12:26
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +30ms
06/04 19:12:26
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +97ms
06/04 19:12:26
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +53ms
06/04 19:12:26
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:12:26
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:12:26
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:12:25.233197583Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +2ms
06/04 19:12:26
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +2ms
06/04 19:12:26
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +22ms
06/04 19:12:26
express-4rxw-014
Node.js v22.16.0
06/04 19:12:26
express-4rxw-014
}
06/04 19:12:26
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:12:26
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:12:26
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:12:26
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:12:26
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:12:26
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:12:26
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:12:26
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:12:26
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:12:26
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:12:26
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:12:26
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:12:26
express-4rxw-014
- /app/src/app.js
06/04 19:12:26
express-4rxw-014
Require stack:
06/04 19:12:26
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:12:26
express-4rxw-014
  ^
06/04 19:12:26
express-4rxw-014
  throw err;
06/04 19:12:26
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:12:26
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 4.725016999999752 ms +5ms
06/04 19:12:26
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 3.546190999999453 ms +0ms
06/04 19:12:26
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:26
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:26
express-4rxw-014
} +0ms
06/04 19:12:27
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:12:27
express-4rxw-014
> backend@1.0.0 start
06/04 19:12:28
express-4rxw-014
  "originalDistro": "debian"
06/04 19:12:28
express-4rxw-014
  "familyDistro": "debian",
06/04 19:12:28
express-4rxw-014
  "targetDistro": "debian",
06/04 19:12:28
express-4rxw-014
{
06/04 19:12:28
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:12:28
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +694ms
06/04 19:12:28
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +11ms
06/04 19:12:28
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:28
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:28
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:28
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:28
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +1ms
06/04 19:12:28
express-4rxw-014
} +13ms
06/04 19:12:28
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:28
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:28
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +223ms
06/04 19:12:28
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +671ms
06/04 19:12:28
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +34ms
06/04 19:12:28
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +0ms
06/04 19:12:28
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +1ms
06/04 19:12:28
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +0ms
06/04 19:12:28
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:12:28
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +4ms
06/04 19:12:28
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +1ms
06/04 19:12:28
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +0ms
06/04 19:12:28
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +0ms
06/04 19:12:28
express-4rxw-014
} +2ms
06/04 19:12:32
express-4rxw-014
libqueryEngine
06/04 19:12:32
express-4rxw-014
    "engines": [
06/04 19:12:32
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:12:32
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:12:32
express-4rxw-014
} +29ms
06/04 19:12:32
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:32
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:32
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +3ms
06/04 19:12:32
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +0ms
06/04 19:12:32
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:12:32
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +4ms
06/04 19:12:32
express-4rxw-014
] +0ms
06/04 19:12:32
express-4rxw-014
libqueryEngine
06/04 19:12:32
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:12:32
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +29ms
06/04 19:12:32
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +34ms
06/04 19:12:32
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +98ms
06/04 19:12:32
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:12:32
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:12:32
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:12:31.474696763Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +11ms
06/04 19:12:32
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +2ms
06/04 19:12:32
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +21ms
06/04 19:12:32
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:12:32
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:32
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:32
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:12:32
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
} +1ms
06/04 19:12:32
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:32
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:32
express-4rxw-014
Environment variables loaded from .env
06/04 19:12:32
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +0ms
06/04 19:12:32
express-4rxw-014
} +1ms
06/04 19:12:32
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:32
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:32
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +3496ms
06/04 19:12:32
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 4.84165800000028 ms +5ms
06/04 19:12:32
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 3.7166330000000016 ms +1ms
06/04 19:12:32
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
06/04 19:12:32
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
} +0ms
06/04 19:12:32
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:32
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:32
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:32
express-4rxw-014
} +1ms
06/04 19:12:32
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:32
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:32
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 3999.3706099999995 ms +89ms
06/04 19:12:32
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 87ms
06/04 19:12:32
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:12:32
express-4rxw-014
} +114ms
06/04 19:12:32
express-4rxw-014
  }
06/04 19:12:32
express-4rxw-014
    }
06/04 19:12:32
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:12:32
express-4rxw-014
    "libqueryEngine": {
06/04 19:12:32
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:12:32
express-4rxw-014
prisma:getGenerators {
06/04 19:12:32
express-4rxw-014
} +0ms
06/04 19:12:32
express-4rxw-014
  }
06/04 19:12:32
express-4rxw-014
    ]
06/04 19:12:32
express-4rxw-014
      }
06/04 19:12:32
express-4rxw-014
        "native": true
06/04 19:12:32
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:12:32
express-4rxw-014
        "fromEnvVar": null,
06/04 19:12:32
express-4rxw-014
      {
06/04 19:12:32
express-4rxw-014
    "binaryTargets": [
06/04 19:12:32
express-4rxw-014
    ],
06/04 19:12:33
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:12:33
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:12:33
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:12:33
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:12:33
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:12:33
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:12:33
express-4rxw-014
- /app/src/app.js
06/04 19:12:33
express-4rxw-014
Require stack:
06/04 19:12:33
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:12:33
express-4rxw-014
  ^
06/04 19:12:33
express-4rxw-014
  throw err;
06/04 19:12:33
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:12:33
express-4rxw-014
Node.js v22.16.0
06/04 19:12:33
express-4rxw-014
}
06/04 19:12:33
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:12:33
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:12:33
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:12:33
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:12:33
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:12:33
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:12:34
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:12:34
express-4rxw-014
> backend@1.0.0 start
06/04 19:12:35
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +0ms
06/04 19:12:35
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +0ms
06/04 19:12:35
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +1ms
06/04 19:12:35
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:12:35
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +2ms
06/04 19:12:35
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
06/04 19:12:35
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +1ms
06/04 19:12:35
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +0ms
06/04 19:12:35
express-4rxw-014
} +44ms
06/04 19:12:35
express-4rxw-014
  "originalDistro": "debian"
06/04 19:12:35
express-4rxw-014
  "familyDistro": "debian",
06/04 19:12:35
express-4rxw-014
  "targetDistro": "debian",
06/04 19:12:35
express-4rxw-014
{
06/04 19:12:35
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:12:35
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +713ms
06/04 19:12:35
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +10ms
06/04 19:12:35
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:35
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:35
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:12:35
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:35
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:35
express-4rxw-014
} +7ms
06/04 19:12:35
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:35
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:35
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +190ms
06/04 19:12:35
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +697ms
06/04 19:12:36
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +36ms
06/04 19:12:41
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +1ms
06/04 19:12:41
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:41
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:41
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:41
express-4rxw-014
} +1ms
06/04 19:12:41
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:41
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:41
express-4rxw-014
Environment variables loaded from .env
06/04 19:12:41
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +1ms
06/04 19:12:41
express-4rxw-014
} +0ms
06/04 19:12:41
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:41
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:41
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +5585ms
06/04 19:12:41
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:12:41
express-4rxw-014
} +98ms
06/04 19:12:41
express-4rxw-014
  }
06/04 19:12:41
express-4rxw-014
    }
06/04 19:12:41
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:12:41
express-4rxw-014
    "libqueryEngine": {
06/04 19:12:41
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:12:41
express-4rxw-014
prisma:getGenerators {
06/04 19:12:41
express-4rxw-014
} +0ms
06/04 19:12:41
express-4rxw-014
  }
06/04 19:12:41
express-4rxw-014
    ]
06/04 19:12:41
express-4rxw-014
      }
06/04 19:12:41
express-4rxw-014
        "native": true
06/04 19:12:41
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:12:41
express-4rxw-014
        "fromEnvVar": null,
06/04 19:12:41
express-4rxw-014
      {
06/04 19:12:41
express-4rxw-014
    "binaryTargets": [
06/04 19:12:41
express-4rxw-014
    ],
06/04 19:12:41
express-4rxw-014
libqueryEngine
06/04 19:12:41
express-4rxw-014
    "engines": [
06/04 19:12:41
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:12:41
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:12:41
express-4rxw-014
} +1ms
06/04 19:12:41
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:41
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:41
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +2ms
06/04 19:12:41
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +0ms
06/04 19:12:41
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:12:41
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:12:41
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +3ms
06/04 19:12:41
express-4rxw-014
] +1ms
06/04 19:12:41
express-4rxw-014
libqueryEngine
06/04 19:12:41
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:12:41
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +31ms
06/04 19:12:41
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +97ms
06/04 19:12:41
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +56ms
06/04 19:12:41
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:12:41
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:12:41
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:12:40.632034992Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +3ms
06/04 19:12:41
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +2ms
06/04 19:12:41
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +25ms
06/04 19:12:41
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:12:41
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
06/04 19:12:41
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:41
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:12:42
express-4rxw-014
} +1ms
06/04 19:12:42
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:42
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:42
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 6121.450481 ms +114ms
06/04 19:12:42
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 112ms
06/04 19:12:42
express-4rxw-014
Node.js v22.16.0
06/04 19:12:42
express-4rxw-014
}
06/04 19:12:42
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:12:42
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:12:42
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:12:42
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:12:42
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:12:42
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:12:42
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:12:42
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:12:42
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:12:42
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:12:42
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:12:42
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:12:42
express-4rxw-014
- /app/src/app.js
06/04 19:12:42
express-4rxw-014
Require stack:
06/04 19:12:42
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:12:42
express-4rxw-014
  ^
06/04 19:12:42
express-4rxw-014
  throw err;
06/04 19:12:42
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:12:42
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 4.8250370000005205 ms +5ms
06/04 19:12:42
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 39.27649500000007 ms +1ms
06/04 19:12:42
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
06/04 19:12:42
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:42
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:42
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:42
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:42
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +36ms
06/04 19:12:42
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:42
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:42
express-4rxw-014
} +0ms
06/04 19:12:42
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:42
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:42
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:42
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:43
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:12:43
express-4rxw-014
> backend@1.0.0 start
06/04 19:12:44
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:12:44
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +765ms
06/04 19:12:44
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +45ms
06/04 19:12:44
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:44
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +1ms
06/04 19:12:44
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:44
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:44
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:44
express-4rxw-014
} +5ms
06/04 19:12:44
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:44
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:44
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +193ms
06/04 19:12:44
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +717ms
06/04 19:12:44
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +0ms
06/04 19:12:44
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +1ms
06/04 19:12:44
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +0ms
06/04 19:12:44
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:12:44
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +3ms
06/04 19:12:44
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
06/04 19:12:44
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +0ms
06/04 19:12:44
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +1ms
06/04 19:12:44
express-4rxw-014
} +2ms
06/04 19:12:44
express-4rxw-014
  "originalDistro": "debian"
06/04 19:12:44
express-4rxw-014
  "familyDistro": "debian",
06/04 19:12:44
express-4rxw-014
  "targetDistro": "debian",
06/04 19:12:44
express-4rxw-014
{
06/04 19:12:45
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +35ms
06/04 19:12:48
express-4rxw-014
} +0ms
06/04 19:12:48
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:48
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:48
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +3ms
06/04 19:12:48
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +0ms
06/04 19:12:48
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:12:48
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +3ms
06/04 19:12:48
express-4rxw-014
] +1ms
06/04 19:12:48
express-4rxw-014
libqueryEngine
06/04 19:12:48
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:12:48
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +69ms
06/04 19:12:48
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +59ms
06/04 19:12:48
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +50ms
06/04 19:12:48
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:12:48
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:12:48
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:12:47.41720771Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +2ms
06/04 19:12:48
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +3ms
06/04 19:12:48
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +20ms
06/04 19:12:48
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:12:48
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:48
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:48
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:12:48
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +1ms
06/04 19:12:48
express-4rxw-014
} +1ms
06/04 19:12:48
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:48
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:48
express-4rxw-014
Environment variables loaded from .env
06/04 19:12:48
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +0ms
06/04 19:12:48
express-4rxw-014
} +1ms
06/04 19:12:48
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:48
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:48
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +3373ms
06/04 19:12:48
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 4.705691000000115 ms +5ms
06/04 19:12:48
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 32.630968000000394 ms +0ms
06/04 19:12:48
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:48
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
} +0ms
06/04 19:12:48
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:48
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:48
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:48
express-4rxw-014
} +30ms
06/04 19:12:48
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:48
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:48
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 3818.8045810000003 ms +43ms
06/04 19:12:48
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 41ms
06/04 19:12:48
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:12:48
express-4rxw-014
} +96ms
06/04 19:12:48
express-4rxw-014
  }
06/04 19:12:48
express-4rxw-014
    }
06/04 19:12:48
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:12:48
express-4rxw-014
    "libqueryEngine": {
06/04 19:12:48
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:12:48
express-4rxw-014
prisma:getGenerators {
06/04 19:12:48
express-4rxw-014
} +1ms
06/04 19:12:48
express-4rxw-014
  }
06/04 19:12:48
express-4rxw-014
    ]
06/04 19:12:48
express-4rxw-014
      }
06/04 19:12:48
express-4rxw-014
        "native": true
06/04 19:12:48
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:12:48
express-4rxw-014
        "fromEnvVar": null,
06/04 19:12:48
express-4rxw-014
      {
06/04 19:12:48
express-4rxw-014
    "binaryTargets": [
06/04 19:12:48
express-4rxw-014
    ],
06/04 19:12:48
express-4rxw-014
libqueryEngine
06/04 19:12:48
express-4rxw-014
    "engines": [
06/04 19:12:48
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:12:48
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:12:49
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:12:49
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:12:49
express-4rxw-014
- /app/src/app.js
06/04 19:12:49
express-4rxw-014
Require stack:
06/04 19:12:49
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:12:49
express-4rxw-014
  ^
06/04 19:12:49
express-4rxw-014
  throw err;
06/04 19:12:49
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:12:49
express-4rxw-014
Node.js v22.16.0
06/04 19:12:49
express-4rxw-014
}
06/04 19:12:49
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:12:49
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:12:49
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:12:49
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:12:49
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:12:49
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:12:49
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:12:49
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:12:49
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:12:49
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:12:50
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:12:50
express-4rxw-014
> backend@1.0.0 start
06/04 19:12:51
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +1ms
06/04 19:12:51
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +0ms
06/04 19:12:51
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +1ms
06/04 19:12:51
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +0ms
06/04 19:12:51
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +2ms
06/04 19:12:51
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
06/04 19:12:51
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +1ms
06/04 19:12:51
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +0ms
06/04 19:12:51
express-4rxw-014
} +2ms
06/04 19:12:51
express-4rxw-014
  "originalDistro": "debian"
06/04 19:12:51
express-4rxw-014
  "familyDistro": "debian",
06/04 19:12:51
express-4rxw-014
  "targetDistro": "debian",
06/04 19:12:51
express-4rxw-014
{
06/04 19:12:51
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:12:51
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +699ms
06/04 19:12:51
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +52ms
06/04 19:12:51
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:51
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:51
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:51
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:51
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:51
express-4rxw-014
} +7ms
06/04 19:12:51
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:51
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:51
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +185ms
06/04 19:12:51
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +642ms
06/04 19:12:52
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +34ms
06/04 19:12:55
express-4rxw-018
    at async /app/node_modules/sequelize/lib/sequelize.js:305:26
06/04 19:12:55
express-4rxw-018
    at async ConnectionManager.getConnection (/app/node_modules/sequelize/lib/dialects/abstract/connection-manager.js:197:7)
06/04 19:12:55
express-4rxw-018
    at async /app/node_modules/sequelize/lib/dialects/abstract/connection-manager.js:174:32
06/04 19:12:55
express-4rxw-018
    at async ConnectionManager._connect (/app/node_modules/sequelize/lib/dialects/abstract/connection-manager.js:222:24)
06/04 19:12:55
express-4rxw-018
    at processTicksAndRejections (internal/process/task_queues.js:95:5)
06/04 19:12:55
express-4rxw-018
    at ConnectionManager.connect (/app/node_modules/sequelize/lib/dialects/mysql/connection-manager.js:94:17)
06/04 19:12:55
express-4rxw-018
(node:38) UnhandledPromiseRejectionWarning: SequelizeAccessDeniedError: Access denied for user 'root'@'10.33.21.74' (using password: YES)
06/04 19:12:55
express-4rxw-018
> node index.js
06/04 19:12:55
express-4rxw-018
> wxcloudrun-express@1.0.0 start /app
06/04 19:12:55
express-4rxw-018
(node:38) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
06/04 19:12:55
express-4rxw-018
(node:38) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)
06/04 19:12:55
express-4rxw-018
(Use `node --trace-warnings ...` to show where the warning was created)
06/04 19:12:55
express-4rxw-018
    at async bootstrap (/app/index.js:55:3)
06/04 19:12:55
express-4rxw-018
    at async init (/app/db.js:25:3)
06/04 19:12:55
express-4rxw-018
    at async Function.sync (/app/node_modules/sequelize/lib/model.js:939:21)
06/04 19:12:55
express-4rxw-018
    at async MySQLQueryInterface.tableExists (/app/node_modules/sequelize/lib/dialects/abstract/query-interface.js:102:17)
06/04 19:12:56
express-4rxw-014
      {
06/04 19:12:56
express-4rxw-014
    "binaryTargets": [
06/04 19:12:56
express-4rxw-014
    ],
06/04 19:12:56
express-4rxw-014
libqueryEngine
06/04 19:12:56
express-4rxw-014
    "engines": [
06/04 19:12:56
express-4rxw-014
  "81e4af48011447c3cc503a190e86995b66d2a28e": {
06/04 19:12:56
express-4rxw-014
prisma:getGenerators neededVersions {
06/04 19:12:56
express-4rxw-014
} +1ms
06/04 19:12:56
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:56
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:56
express-4rxw-014
prisma:loadEnv project root found at /app/node_modules/@prisma/client/package.json +2ms
06/04 19:12:56
express-4rxw-014
prisma:mergeSchemas Using mergeSchemas Wasm +1ms
06/04 19:12:56
express-4rxw-014
prisma:generator baseDir /app/prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:generator prismaClientDir /app/node_modules/@prisma/client +0ms
06/04 19:12:56
express-4rxw-014
prisma:generator prismaCliDir /app/node_modules/prisma +4ms
06/04 19:12:56
express-4rxw-014
] +1ms
06/04 19:12:56
express-4rxw-014
libqueryEngine
06/04 19:12:56
express-4rxw-014
prisma:client:generator requiresEngines [
06/04 19:12:56
express-4rxw-014
prisma:getDMMF dmmf data retrieved without errors in getDmmf Wasm +28ms
06/04 19:12:56
express-4rxw-014
prisma:getDMMF Using getDmmf Wasm +98ms
06/04 19:12:56
express-4rxw-014
prisma:fetch-engine:download copying /root/.cache/prisma/master/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery-engine to /app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node +50ms
06/04 19:12:56
express-4rxw-014
Running generate... (Use --skip-generate to skip the generators)
06/04 19:12:56
express-4rxw-014
The database is already in sync with the Prisma schema.
06/04 19:12:56
express-4rxw-014
prisma:schemaEngine:stderr {"timestamp":"2025-06-04T11:12:55.042950018Z","level":"INFO","fields":{"message":"Starting schema engine RPC server","git_hash":"81e4af48011447c3cc503a190e86995b66d2a28e"},"target":"schema_engine"} +3ms
06/04 19:12:56
express-4rxw-014
prisma:schemaEngine:rpc SENDING RPC CALL {"id":1,"jsonrpc":"2.0","method":"schemaPush","params":{"force":true,"schema":{"files":[{"path":"/app/prisma/schema.prisma","content":"// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      Int      @id @default(autoincrement())\n  phone                   String   @unique @db.VarChar(20)\n  membershipType          String   @default(\"free\") @db.VarChar(50)\n  membershipExpiryDate    DateTime?\n  dailyExportCount        Int      @default(0)\n  dailyExportCountResetDate DateTime @default(now())\n  createdAt              DateTime @default(now())\n  updatedAt              DateTime @updatedAt\n  paymentIntents         PaymentIntent[]\n\n  @@map(\"users\")\n}\n\nmodel PaymentIntent {\n  id                  Int      @id @default(autoincrement())\n  outTradeNo          String   @unique @db.VarChar(255)\n  userId              Int\n  membershipType      String   @db.VarChar(50)\n  amount              Int\n  status              String   @default(\"pending\") @db.VarChar(50)\n  error               String?  @db.Text\n  wechatTransactionId String?  @db.VarChar(255)\n  paidAt              DateTime?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n  user                User     @relation(fields: [userId], references: [id])\n\n  @@map(\"payment_intents\")\n}\n"}]}}} +3ms
06/04 19:12:56
express-4rxw-014
prisma:schemaEngine:rpc starting Schema engine with binary: /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +23ms
06/04 19:12:56
express-4rxw-014
Datasource "db": MySQL database "nodejs_demo" at "10.33.107.181:3306"
06/04 19:12:56
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +1ms
06/04 19:12:56
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:56
express-4rxw-014
Prisma schema loaded from prisma/schema.prisma
06/04 19:12:56
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
} +2ms
06/04 19:12:56
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:56
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:56
express-4rxw-014
Environment variables loaded from .env
06/04 19:12:56
express-4rxw-014
prisma:tryLoadEnv Environment variables loaded from /app/.env +0ms
06/04 19:12:56
express-4rxw-014
} +1ms
06/04 19:12:56
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:56
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:56
express-4rxw-014
prisma:loadEnv project root found at /app/package.json +3990ms
06/04 19:12:56
express-4rxw-014
    at Object. (/app/src/app.js:6:13)
06/04 19:12:56
express-4rxw-014
    at require (node:internal/modules/helpers:135:16)
06/04 19:12:56
express-4rxw-014
    at Module.require (node:internal/modules/cjs/loader:1487:12)
06/04 19:12:56
express-4rxw-014
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
06/04 19:12:56
express-4rxw-014
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
06/04 19:12:56
express-4rxw-014
    at Function._load (node:internal/modules/cjs/loader:1211:37)
06/04 19:12:56
express-4rxw-014
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
06/04 19:12:56
express-4rxw-014
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
06/04 19:12:56
express-4rxw-014
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
06/04 19:12:56
express-4rxw-014
- /app/src/app.js
06/04 19:12:56
express-4rxw-014
Require stack:
06/04 19:12:56
express-4rxw-014
Error: Cannot find module '@cloudbase/node-sdk'
06/04 19:12:56
express-4rxw-014
  ^
06/04 19:12:56
express-4rxw-014
  throw err;
06/04 19:12:56
express-4rxw-014
node:internal/modules/cjs/loader:1404
06/04 19:12:56
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for "await checkpoint.check(data)": 4.6580919999996695 ms +5ms
06/04 19:12:56
express-4rxw-014
prisma:cli:checkpoint runCheckpointClientCheck(): Execution time for getting info: 3.8267509999996037 ms +0ms
06/04 19:12:56
express-4rxw-014
prisma:getConfig config data retrieved without errors in getConfig Wasm +2ms
06/04 19:12:56
express-4rxw-014
prisma:getConfig Using getConfig Wasm +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +1ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
} +0ms
06/04 19:12:56
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:56
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:56
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:56
express-4rxw-014
} +1ms
06/04 19:12:56
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:56
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:56
express-4rxw-014
prisma:cli:bin Execution time for executing "await cli.parse(commandArray)": 4510.561141 ms +106ms
06/04 19:12:56
express-4rxw-014
AGâœ” Generated Prisma Client (v6.9.0) to ./node_modules/@prisma/client in 103ms
06/04 19:12:56
express-4rxw-014
AGRunning generate... - Prisma Client
06/04 19:12:56
express-4rxw-014
} +98ms
06/04 19:12:56
express-4rxw-014
  }
06/04 19:12:56
express-4rxw-014
    }
06/04 19:12:56
express-4rxw-014
      "debian-openssl-3.0.x": "/app/node_modules/prisma/libquery_engine-debian-openssl-3.0.x.so.node"
06/04 19:12:56
express-4rxw-014
    "libqueryEngine": {
06/04 19:12:56
express-4rxw-014
  "generatorBinaryPaths": {
06/04 19:12:56
express-4rxw-014
prisma:getGenerators {
06/04 19:12:56
express-4rxw-014
} +0ms
06/04 19:12:56
express-4rxw-014
  }
06/04 19:12:56
express-4rxw-014
    ]
06/04 19:12:56
express-4rxw-014
      }
06/04 19:12:56
express-4rxw-014
        "native": true
06/04 19:12:56
express-4rxw-014
        "value": "debian-openssl-3.0.x",
06/04 19:12:56
express-4rxw-014
        "fromEnvVar": null,
06/04 19:12:56
express-4rxw-014
Node.js v22.16.0
06/04 19:12:56
express-4rxw-014
}
06/04 19:12:56
express-4rxw-014
  requireStack: [ '/app/src/app.js' ]
06/04 19:12:56
express-4rxw-014
  code: 'MODULE_NOT_FOUND',
06/04 19:12:56
express-4rxw-014
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
06/04 19:12:57
express-4rxw-014
> DEBUG=prisma* npx prisma db push --accept-data-loss && node src/app.js
06/04 19:12:57
express-4rxw-014
> backend@1.0.0 start
06/04 19:12:58
express-4rxw-018
> node index.js
06/04 19:12:58
express-4rxw-018
> wxcloudrun-express@1.0.0 start /app
06/04 19:12:58
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x ... +1ms
06/04 19:12:58
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz will be downloaded to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node +0ms
06/04 19:12:58
express-4rxw-014
prisma:fetch-engine:download https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/schema-engine.gz will be downloaded to /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x +0ms
06/04 19:12:58
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node does not exist and must be downloaded +1ms
06/04 19:12:58
express-4rxw-014
prisma:fetch-engine:download file /app/node_modules/@prisma/engines/schema-engine-debian-openssl-3.0.x does not exist and must be downloaded +2ms
06/04 19:12:58
express-4rxw-014
prisma:get-platform The parsed libssl version is: 3.0.x +0ms
06/04 19:12:58
express-4rxw-014
prisma:get-platform Found libssl.so file using platform-specific paths: libssl.so.3 +0ms
06/04 19:12:58
express-4rxw-014
prisma:get-platform Trying platform-specific paths for "debian" (and "ubuntu") +0ms
06/04 19:12:58
express-4rxw-014
} +2ms
06/04 19:12:58
express-4rxw-014
  "originalDistro": "debian"
06/04 19:12:58
express-4rxw-014
  "familyDistro": "debian",
06/04 19:12:58
express-4rxw-014
  "targetDistro": "debian",
06/04 19:12:58
express-4rxw-014
{
06/04 19:12:58
express-4rxw-014
prisma:get-platform Found distro info:
06/04 19:12:58
express-4rxw-014
prisma:engines binaries to download schema-engine, libquery-engine +657ms
06/04 19:12:58
express-4rxw-014
prisma:cli Failed to read schema information. Using default values: '{\n  "name": "GetConfigError"\n}' +53ms
06/04 19:12:58
express-4rxw-014
prisma:getConfig Using getConfig Wasm +1ms
06/04 19:12:58
express-4rxw-014
prisma:getSchema Reading schema from single file /app/prisma/schema.prisma +0ms
06/04 19:12:58
express-4rxw-014
prisma:getSchema Checking existence of /app/prisma/schema.prisma +0ms
06/04 19:12:58
express-4rxw-014
prisma:getSchema Reading schema from single file /app/schema.prisma +1ms
06/04 19:12:58
express-4rxw-014
prisma:getSchema Checking existence of /app/schema.prisma +0ms
06/04 19:12:58
express-4rxw-014
} +7ms
06/04 19:12:58
express-4rxw-014
  "packagePath": "/app/package.json"
06/04 19:12:58
express-4rxw-014
prisma:getSchema prismaConfig {
06/04 19:12:58
express-4rxw-014
prisma:config:loadConfigFromFile No config file found in the current working directory /app +187ms
06/04 19:12:58
express-4rxw-014
prisma:cli:bin Failed to initialize the command state: Error: ENOENT: no such file or directory, open '/root/.config/prisma-nodejs/commands.json' +598ms
06/04 19:12:59
express-4rxw-014
prisma:fetch-engine:download Downloading https://binaries.prisma.sh/all_commits/81e4af48011447c3cc503a190e86995b66d2a28e/debian-openssl-3.0.x/libquery_engine.so.node.gz to /app/node_modules/@prisma/engines/libquery_engine-debian-openssl-3.0.x.so.node ... +35ms
06/04 19:12:59
express-4rxw-018
(node:38) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
06/04 19:12:59
express-4rxw-018
(node:38) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)
06/04 19:12:59
express-4rxw-018
(Use `node --trace-warnings ...` to show where the warning was created)
06/04 19:12:59
express-4rxw-018
    at async bootstrap (/app/index.js:55:3)
06/04 19:12:59
express-4rxw-018
    at async init (/app/db.js:25:3)
06/04 19:12:59
express-4rxw-018
    at async Function.sync (/app/node_modules/sequelize/lib/model.js:939:21)
06/04 19:12:59
express-4rxw-018
    at async MySQLQueryInterface.tableExists (/app/node_modules/sequelize/lib/dialects/abstract/query-interface.js:102:17)
06/04 19:12:59
express-4rxw-018
    at async /app/node_modules/sequelize/lib/sequelize.js:305:26
06/04 19:12:59
express-4rxw-018
    at async ConnectionManager.getConnection (/app/node_modules/sequelize/lib/dialects/abstract/connection-manager.js:197:7)
06/04 19:12:59
express-4rxw-018
    at async /app/node_modules/sequelize/lib/dialects/abstract/connection-manager.js:174:32
06/04 19:12:59
express-4rxw-018
    at async ConnectionManager._connect (/app/node_modules/sequelize/lib/dialects/abstract/connection-manager.js:222:24)
06/04 19:12:59
express-4rxw-018
    at processTicksAndRejections (internal/process/task_queues.js:95:5)
06/04 19:12:59
express-4rxw-018
    at ConnectionManager.connect (/app/node_modules/sequelize/lib/dialects/mysql/connection-manager.js:94:17)
06/04 19:12:59
express-4rxw-018
(node:38) UnhandledPromiseRejectionWarning: SequelizeAccessDeniedError: Access denied for user 'root'@'10.33.21.74' (using password: YES)
